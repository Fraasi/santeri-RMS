{"version":3,"sources":["components/index.js","App.js","serviceWorker.js","index.js"],"names":["Input","inputRef","useRef","dropRef","useState","name","lastModified","size","type","file","setFile","mean1","mean2","means","setMeans","dragEnterOver","e","stopPropagation","preventDefault","useEffect","current","addEventListener","files","dataTransfer","readFiles","console","log","item","reader","FileReader","onloadend","theFile","target","result","data","blob","f32a","Int32Array","results","i","length","r","Meyda","extract","slice","push","avg","reduce","acc","num","mean","onerror","err","Error","readAsArrayBuffer","number","style","display","ref","accept","multiple","onChange","id","onClick","click","className","Date","toLocaleString","toFixed","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.866f819a.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\nimport Meyda from 'meyda'\n\nconst Input = () => {\n\n  const inputRef = useRef()\n  const dropRef = useRef()\n  const [file, setFile] = useState({\n    name: '',\n    lastModified: 0,\n    size: 0,\n    type: '',\n  })\n  const [means, setMeans] = useState({mean1:0,mean2:0})\n\n  useEffect(() => {\n    function drop(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      const dt = e.dataTransfer;\n      const files = dt.files;\n      readFiles(files);\n    }\n\n    dropRef.current.addEventListener(\"dragenter\", dragEnterOver, false);\n    dropRef.current.addEventListener(\"dragover\", dragEnterOver, false);\n    dropRef.current.addEventListener(\"drop\", drop, false);\n  }, [])\n\n  function dragEnterOver(e) {\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  const readFiles = (files) => {\n    console.log('files:', files, inputRef.current.files.item(0))\n    // const file = files ? files.item(0) : inputRef.current.files.item(0)\n    const file = inputRef.current.files.item(0)\n\n    setFile(file)\n    const reader = new FileReader()\n    reader.onloadend = (theFile) => {\n      console.log('theFile:', theFile.target.result)\n      var data = {\n        blob: theFile.target.result,\n        name: file.name,\n      }\n      // console.log('data:', data)\n\n\n      const f32a = new Int32Array(data.blob)\n      // console.log('f32a:', f32a)\n      // const cut = f32a.subarray(0,512)\n      // console.log('cut:', cut)\n\n      const results = []\n      for (let i = 0; i < f32a.length - 512; i += 512) {\n        const r = Meyda.extract('rms', f32a.slice(i, i + 512))\n        results.push(r)\n      }\n      const avg = results.reduce((acc, num) => {\n        return acc + num\n      }, 0)\n      const mean = avg / f32a.length\n      const mean2 = avg / (f32a.length - 512)\n      console.log('mean:', mean, mean2)\n      setMeans({mean1:mean,mean2:mean2})\n      // console.log('results:', results)\n      // const r = Meyda.extract('rms', f32a)\n      // console.log('r:', r)\n    }\n    reader.onerror = (err) => {throw new Error(err)}\n    if (file) reader.readAsArrayBuffer(file)\n  }\n\n  function returnFileSize(number) {\n    if (number < 1024) {\n      return number + ' bytes';\n    } else if (number > 1024 && number < 1048576) {\n      return (number / 1024).toFixed(1) + ' KB';\n    } else if (number > 1048576) {\n      return (number / 1048576).toFixed(1) + ' MB';\n    }\n  }\n\n  const openFileInput = () => {\n    inputRef.current.click()\n  }\n\n\n\n  const { name, lastModified, size, type } = file\n  return (\n    <div>\n      <input\n        style={{ display: 'none' }}\n        ref={inputRef}\n        type=\"file\"\n        name=\"file\"\n        accept=\"audio/*\"\n        multiple={false}\n        onChange={readFiles}\n      />\n      <button id=\"fileSelect\" onClick={openFileInput}>Select some files</button>\n      {/* handle file = null */}\n      <p className=\"fileattrs\" ref={dropRef}>\n        filename: {name} <br />\n        lastModifiedDate: {new Date(lastModified).toLocaleString()}<br />\n        size: {returnFileSize(size)}<br />\n        type: {type}\n      </p>\n      <p className=\"means\">\n        rms1: {means.mean1} <br />\n        rms2: {means.mean2}\n      </p>\n\n    </div >\n  )\n}\n\nexport default Input\n","import React from 'react';\nimport Input from './components/index.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n<Input />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}